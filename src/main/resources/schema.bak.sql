-------------------- 테이블 생성
DROP TABLE IF EXISTS `REFRESH_TOKEN`;
CREATE TABLE `REFRESH_TOKEN` (
     `id`			INT 			NOT NULL	AUTO_INCREMENT PRIMARY KEY,
     `user_id`		BINARY(16)		NOT NULL,
     `token`		VARCHAR(600)	NULL,
     `issued_at`	TIMESTAMP 		NULL		DEFAULT current_timestamp,
     `expired_at`	TIMESTAMP 		NULL
);

DROP TABLE IF EXISTS `RESERVATION_TOKEN`;
CREATE TABLE `RESERVATION_TOKEN` (
     `id`					BINARY(16)		NOT NULL	PRIMARY KEY,
     `user_id`				BINARY(16)		NOT NULL,
     `concert_schedule_id`	INT				NOT NULL,
     `order`				INT				NULL,
     `status`				VARCHAR(20)		NULL		COMMENT 'WAITING,READY,EXPIRED',
     `issued_at`			TIMESTAMP		NULL		DEFAULT current_timestamp,
     `expired_at`			TIMESTAMP		NULL
);


DROP TABLE IF EXISTS `PAY_HISTORY`;
CREATE TABLE `PAY_HISTORY` (
    `id`					INT				NOT NULL	AUTO_INCREMENT PRIMARY KEY,
    `user_id`				BINARY(16)		NULL,
    `email`					VARCHAR(255)	NULL,
    `concert_id`			INT				NULL,
    `concert_name`			VARCHAR(100)	NULL,
    `concert_schedule_id`	INT				NULL,
    `schedule_at`			TIMESTAMP		NULL,
    `seat_id`				INT				NULL,
    `seat_number`			INT				NULL,
    `seat_price`			INT				NULL,
    `amount`				INT				NULL,
    `pay_at`				TIMESTAMP		NULL		DEFAULT current_timestamp,
    `status`				VARCHAR(20)		NULL		COMMENT 'SUCCESS,FAILED,CANCELED',
    `reason`				VARCHAR(255)	NULL		COMMENT '포인트부족,임시배정만료,사용자취소 등'
);


DROP TABLE IF EXISTS `POINT_HISTORY`;
CREATE TABLE `POINT_HISTORY` (
     `id`			    INT			NOT NULL	AUTO_INCREMENT PRIMARY KEY,
     `user_id`		    BINARY(16)	NOT NULL,
     `type`			    VARCHAR(20)	NOT NULL	COMMENT 'CHARGE,USE',
     `amount`		    INT			NOT NULL,
     `current_point`	INT			NOT NULL,
     `created_at`	    TIMESTAMP	NOT NULL	DEFAULT current_timestamp
);


DROP TABLE IF EXISTS `SEAT`;
CREATE TABLE `SEAT` (
    `id`					INT 		NOT NULL	AUTO_INCREMENT PRIMARY KEY,
    `concert_schedule_id`	INT			NOT NULL,
    `number`			    INT			NOT NULL	COMMENT '1~50',
    `price`					INT			NOT NULL	DEFAULT 0,
    `user_id`				BINARY(16)	NULL,
    `status`				VARCHAR(20)	NOT NULL	DEFAULT 'AVAILABLE'	COMMENT 'AVAILABLE,TEMP_RESERVED,RESERVED,EXPIRED,HOLD',
    `released_at`			TIMESTAMP 	NULL,
    `reserved_at`			TIMESTAMP 	NULL
);


DROP TABLE IF EXISTS `CONCERT_SCHEDULE`;
CREATE TABLE `CONCERT_SCHEDULE` (
	`id`			INT			NOT NULL	AUTO_INCREMENT PRIMARY KEY,
	`concert_id`	INT			NOT NULL,
	`schedule_at`	TIMESTAMP	NOT NULL
);


DROP TABLE IF EXISTS `CONCERT`;
CREATE TABLE `CONCERT` (
    `id`	INT				NOT NULL	AUTO_INCREMENT PRIMARY KEY,
    `name`	VARCHAR(100)	NOT NULL
);


DROP TABLE IF EXISTS `USER`;
CREATE TABLE `USER` (
    `id`			BINARY(16)		NOT NULL    PRIMARY KEY,
    `email`			VARCHAR(255)	NOT NULL,
    `password`		VARCHAR(255)	NOT NULL,
    `name`			VARCHAR(50)		NOT NULL,
    `phone`			VARCHAR(20)		NOT NULL,
    `point`			INT				NOT NULL	DEFAULT 0,
    `role`			VARCHAR(20)		NOT NULL	DEFAULT 'USER'	COMMENT 'USER,ADMIN',
    `created_at`	TIMESTAMP		NOT NULL	DEFAULT current_timestamp,
    `updated_at`	TIMESTAMP		NULL		DEFAULT current_timestamp
);


-------------------- 제약조건 추가
-- REFRESH_TOKEN
ALTER TABLE `REFRESH_TOKEN` ADD CONSTRAINT `UK_REFRESH_TOKEN_TOKEN` UNIQUE (`token`);
ALTER TABLE `REFRESH_TOKEN` ADD INDEX `IDX_REFRESH_TOKEN_USER_ID` (`user_id`);
ALTER TABLE `REFRESH_TOKEN` ADD CONSTRAINT `FK_REFRESH_TOKEN_USER_ID` FOREIGN KEY (`user_id`) REFERENCES `USER` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;


-- SEAT
ALTER TABLE `SEAT` ADD CONSTRAINT `UK_SEAT_SCHEDULE_NUMBER` UNIQUE (`concert_schedule_id`, `number`);
ALTER TABLE `SEAT` ADD INDEX `IDX_SEAT_USER_ID` (`user_id`);
ALTER TABLE `SEAT` ADD INDEX `IDX_SEAT_SCHEDULE_STATUS` (`concert_schedule_id`, `status`);
ALTER TABLE `SEAT` ADD CONSTRAINT `FK_SEAT_CONCERT_SCHEDULE_ID` FOREIGN KEY (`concert_schedule_id`) REFERENCES `CONCERT_SCHEDULE` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE `SEAT` ADD CONSTRAINT `FK_SEAT_USER_ID` FOREIGN KEY (`user_id`) REFERENCES `USER` (`id`) ON DELETE CASCADE;


-- PAY_HISTORY
ALTER TABLE `PAY_HISTORY` ADD INDEX `IDX_PAY_HISTORY_USER_PAY_AT` (`user_id`, `pay_at` DESC);
ALTER TABLE `PAY_HISTORY` ADD INDEX `IDX_PAY_HISTORY_CONCERT_SCHEDULE_ID` (`concert_schedule_id`);


-- POINT_HISTORY
ALTER TABLE `POINT_HISTORY` ADD INDEX `IDX_POINT_HISTORY_USER_CREATED_AT` (`user_id`, `created_at` DESC);
ALTER TABLE `POINT_HISTORY` ADD CONSTRAINT `FK_POINT_HISTORY_USER_ID` FOREIGN KEY (`user_id`) REFERENCES `USER` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;


-- CONCERT_SCHEDULE
ALTER TABLE `CONCERT_SCHEDULE` ADD INDEX `IDX_CONCERT_SCHEDULE_CONCERT_AT` (`concert_id`, `schedule_at`);


-- USER
ALTER TABLE `USER` ADD CONSTRAINT `UK_USER_EMAIL` UNIQUE (`email`);


-- CONCERT


-- RESERVATION_TOKEN
ALTER TABLE `RESERVATION_TOKEN` ADD INDEX `IDX_RESERVATION_USER_SCHEDULE` (`user_id`, `concert_schedule_id`);
ALTER TABLE `RESERVATION_TOKEN` ADD INDEX `IDX_RESERVATION_SCHEDULE_STATUS_ORDER` (`concert_schedule_id`, `status`, `order`);
ALTER TABLE `RESERVATION_TOKEN` ADD CONSTRAINT `FK_RESERVATION_TOKEN_USER_ID` FOREIGN KEY (`user_id`) REFERENCES `USER` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE `RESERVATION_TOKEN` ADD CONSTRAINT `FK_RESERVATION_TOKEN_SCHEDULE_ID` FOREIGN KEY (`concert_schedule_id`) REFERENCES `CONCERT_SCHEDULE` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;


